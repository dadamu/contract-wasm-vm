// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/contract/interfaces/repository.go
//
// Generated by this command:
//
//	mockgen -source ./internal/contract/interfaces/repository.go -package testutil -destination ./internal/contract/interfaces/testutil/repository_mock.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIContractRepository is a mock of IContractRepository interface.
type MockIContractRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIContractRepositoryMockRecorder
	isgomock struct{}
}

// MockIContractRepositoryMockRecorder is the mock recorder for MockIContractRepository.
type MockIContractRepositoryMockRecorder struct {
	mock *MockIContractRepository
}

// NewMockIContractRepository creates a new mock instance.
func NewMockIContractRepository(ctrl *gomock.Controller) *MockIContractRepository {
	mock := &MockIContractRepository{ctrl: ctrl}
	mock.recorder = &MockIContractRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContractRepository) EXPECT() *MockIContractRepositoryMockRecorder {
	return m.recorder
}

// CreateConctract mocks base method.
func (m *MockIContractRepository) CreateConctract(codeId uint64, contractId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConctract", codeId, contractId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConctract indicates an expected call of CreateConctract.
func (mr *MockIContractRepositoryMockRecorder) CreateConctract(codeId, contractId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConctract", reflect.TypeOf((*MockIContractRepository)(nil).CreateConctract), codeId, contractId)
}

// GetContractCodeByContract mocks base method.
func (m *MockIContractRepository) GetContractCodeByContract(contractId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractCodeByContract", contractId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractCodeByContract indicates an expected call of GetContractCodeByContract.
func (mr *MockIContractRepositoryMockRecorder) GetContractCodeByContract(contractId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractCodeByContract", reflect.TypeOf((*MockIContractRepository)(nil).GetContractCodeByContract), contractId)
}

// GetContractCodeById mocks base method.
func (m *MockIContractRepository) GetContractCodeById(codeId uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractCodeById", codeId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractCodeById indicates an expected call of GetContractCodeById.
func (mr *MockIContractRepositoryMockRecorder) GetContractCodeById(codeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractCodeById", reflect.TypeOf((*MockIContractRepository)(nil).GetContractCodeById), codeId)
}

// GetTotalContractAmount mocks base method.
func (m *MockIContractRepository) GetTotalContractAmount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalContractAmount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetTotalContractAmount indicates an expected call of GetTotalContractAmount.
func (mr *MockIContractRepositoryMockRecorder) GetTotalContractAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalContractAmount", reflect.TypeOf((*MockIContractRepository)(nil).GetTotalContractAmount))
}

// LoadEntity mocks base method.
func (m *MockIContractRepository) LoadEntity(contractId, key string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEntity", contractId, key)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// LoadEntity indicates an expected call of LoadEntity.
func (mr *MockIContractRepositoryMockRecorder) LoadEntity(contractId, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEntity", reflect.TypeOf((*MockIContractRepository)(nil).LoadEntity), contractId, key)
}

// SaveEntity mocks base method.
func (m *MockIContractRepository) SaveEntity(contractId, key string, data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveEntity", contractId, key, data)
}

// SaveEntity indicates an expected call of SaveEntity.
func (mr *MockIContractRepositoryMockRecorder) SaveEntity(contractId, key, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEntity", reflect.TypeOf((*MockIContractRepository)(nil).SaveEntity), contractId, key, data)
}

// TryInitializeContract mocks base method.
func (m *MockIContractRepository) TryInitializeContract(contractId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryInitializeContract", contractId)
	ret0, _ := ret[0].(error)
	return ret0
}

// TryInitializeContract indicates an expected call of TryInitializeContract.
func (mr *MockIContractRepositoryMockRecorder) TryInitializeContract(contractId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryInitializeContract", reflect.TypeOf((*MockIContractRepository)(nil).TryInitializeContract), contractId)
}
