// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/contract/interfaces/contract.go
//
// Generated by this command:
//
//	mockgen -source ./internal/contract/interfaces/contract.go -package testutil -destination ./internal/contract/interfaces/testutil/contract_mock.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	interfaces "github.com/dadamu/contract-wasmvm/internal/contract/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockVMMessage is a mock of VMMessage interface.
type MockVMMessage struct {
	ctrl     *gomock.Controller
	recorder *MockVMMessageMockRecorder
	isgomock struct{}
}

// MockVMMessageMockRecorder is the mock recorder for MockVMMessage.
type MockVMMessageMockRecorder struct {
	mock *MockVMMessage
}

// NewMockVMMessage creates a new mock instance.
func NewMockVMMessage(ctrl *gomock.Controller) *MockVMMessage {
	mock := &MockVMMessage{ctrl: ctrl}
	mock.recorder = &MockVMMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVMMessage) EXPECT() *MockVMMessageMockRecorder {
	return m.recorder
}

// IsVMMessage mocks base method.
func (m *MockVMMessage) IsVMMessage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IsVMMessage")
}

// IsVMMessage indicates an expected call of IsVMMessage.
func (mr *MockVMMessageMockRecorder) IsVMMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVMMessage", reflect.TypeOf((*MockVMMessage)(nil).IsVMMessage))
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
	isgomock struct{}
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// GetGasLimit mocks base method.
func (m *MockTransaction) GetGasLimit() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasLimit")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetGasLimit indicates an expected call of GetGasLimit.
func (mr *MockTransactionMockRecorder) GetGasLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasLimit", reflect.TypeOf((*MockTransaction)(nil).GetGasLimit))
}

// GetMessages mocks base method.
func (m *MockTransaction) GetMessages() []interfaces.VMMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages")
	ret0, _ := ret[0].([]interfaces.VMMessage)
	return ret0
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockTransactionMockRecorder) GetMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockTransaction)(nil).GetMessages))
}

// GetState mocks base method.
func (m *MockTransaction) GetState() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockTransactionMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockTransaction)(nil).GetState))
}
