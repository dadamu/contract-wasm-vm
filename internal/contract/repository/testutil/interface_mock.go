// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interface.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/interface.go -package testutil -destination ./internal/repository/testutil/interface_mock.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
	isgomock struct{}
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// LoadEntity mocks base method.
func (m *MockIRepository) LoadEntity(namespace, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEntity", namespace, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadEntity indicates an expected call of LoadEntity.
func (mr *MockIRepositoryMockRecorder) LoadEntity(namespace, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEntity", reflect.TypeOf((*MockIRepository)(nil).LoadEntity), namespace, key)
}

// SaveEntity mocks base method.
func (m *MockIRepository) SaveEntity(namespace, key string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEntity", namespace, key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEntity indicates an expected call of SaveEntity.
func (mr *MockIRepositoryMockRecorder) SaveEntity(namespace, key, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEntity", reflect.TypeOf((*MockIRepository)(nil).SaveEntity), namespace, key, data)
}
