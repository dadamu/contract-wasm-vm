// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/contract/interfaces/contract.go
//
// Generated by this command:
//
//	mockgen -source ./internal/contract/interfaces/contract.go -package testutil -destination ./internal/contract/interfaces/testutil/contract_mock.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	interfaces "github.com/dadamu/contract-wasmvm/internal/contract/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
	isgomock struct{}
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// GetContractMessages mocks base method.
func (m *MockTransaction) GetContractMessages() []interfaces.ContractMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractMessages")
	ret0, _ := ret[0].([]interfaces.ContractMessage)
	return ret0
}

// GetContractMessages indicates an expected call of GetContractMessages.
func (mr *MockTransactionMockRecorder) GetContractMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractMessages", reflect.TypeOf((*MockTransaction)(nil).GetContractMessages))
}

// GetGasLimit mocks base method.
func (m *MockTransaction) GetGasLimit() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasLimit")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetGasLimit indicates an expected call of GetGasLimit.
func (mr *MockTransactionMockRecorder) GetGasLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasLimit", reflect.TypeOf((*MockTransaction)(nil).GetGasLimit))
}

// GetState mocks base method.
func (m *MockTransaction) GetState() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockTransactionMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockTransaction)(nil).GetState))
}
